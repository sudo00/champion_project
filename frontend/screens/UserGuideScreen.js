import { Card, Center, HStack, Heading, Image, VStack } from "@gluestack-ui/themed";
import { ScrollView, StyleSheet } from "react-native";
import Markdown from "react-native-markdown-display";

const guideImages = {
    image1: require("./../assets/image_01.png"),
    image2: require("./../assets/image_02.png"),
    image3: require("./../assets/image_03.png"),
    image4: require("./../assets/image_04.png"),
    image5: require("./../assets/image_05.png"),
    image6: require("./../assets/image_06.png"),
    image7: require("./../assets/image_07.png"),
    image8: require("./../assets/image_08.png"),
    image9: require("./../assets/image_09.png"),
    image10: require("./../assets/image_10.png"),
    image11: require("./../assets/image_11.png"),
    image12: require("./../assets/image_12.png"),
}
const guideText = {
    section1: `
# Инструкция по использованию сервиса генерации маркетинговых изображений
### Описание параметров генерации. Заполнение полей параметров генерации
    `,
    section2: `Пользователь задает обязательные параметры для генерации: ***ширина*** и ***высота*** изображения, ***количество*** изображений, тип рекламируемого продукта, категория клиентских трат. Также есть возможность генерировать изображения без ограничений используя дополнительные параметры генерации: промпт, негативный промпт.

Если тип рекламируемого продукта и категория клиентских трат неизвестны выберите их случайно и напишите положительный промпт для генерации. В данном случае тип и категрия не будут учтены. Если же тип рекламируемого продукта и категория клиентских трат известны, выберите их и не заполняйте положительный промпт, иначе категории не будут учтены! 
`,
    section3: `### Use-cases
Предполагается два основных метода генерации:  
- с использованием своего промта идеи для изображения
- с использованием категории клиентских затрат и типа рекламируемого продукта

Сейчас во втором случае предполагается, что категория и тип продукта выделяются пользователем из данных о клиенте самостоятельно.

А также предусмотрено два способа редактирования полученных изображений:
 - перегенерация выделенных областей изображения произвольной формы на основе промта
 - добавление изображения на баннер

### Тип рекламируемого продукта
Всего типов четыре: 
- ***ипотека***, 
- ***кредитная карта***,
- ***автокредит***
- ***премиум***. 

Сейчас в одну категорию занесены КК и ПК; КПЗН и ипотека; КПА и АК. С точки зрения композиции на изображении, судя по данным, между ними нет разницы.

### Категория клиентских трат:
Всего категорий четыре: 
- ***путешествия***; 
- ***красота и здоровье***; 
- ***связь и интернет***; 
- ***заправки***. 

Лучше всего генерируется промпт для  категории “путешествия”. Качество генерации зависит от примеров подаваемых на вход языковой модели.

### Промпт
Поле должно заполняться на английском языке. Промпт предполагает подробное описание объектов на изображении, рекомендуется определить цвета всех объектов.

### Негативный промпт
Поле должно заполняться на английском языке. Можно описать объекты и стили, которые нежелательно видеть на изображении. Это поле рекомендуется заполнять, если необходимо запретить генерировать что-то конкретное. Не нужно писать общие конфигурации, которых стоит избегать, например, ***ugly***, ***deformed*** и так далее, они учитываются автоматически.

Обновление ленты и статуса текущих задач (всего три типа: ***генерация***, ***inpaint***, ***добавление на баннер***) происходит каждые 5 секунд, а также по нажатию кнопки ***Обновить*** в нижнем левом углу страницы.

Кнопка ***Очистить ввод*** сбрасывает текущие значения формы к дефолтным.

При генерации изображений установлены лимиты по высоте и ширине изображения:
 - Не меньше 64 пикселей;
 - Не больше 1024 пикселей.

 ### Карточка изображения
`,
    section4: `При нажатии на изображение доступно выделение области. Если выбрано 3 и более точек, то становится доступна кнопка ***Изменить выделенную область***, а также кнопка ***Убрать выделение***. Не нужно пытаться делать выделенную область замкнутой, т.к. в любом случае первая и последняя точки будут соединены и образуют замкнутую область выделения.
`,
    section5: `По нажатию на кнопку ***Изменить выделенную область*** открывается модальное окно промтинга для выделенного фрагмента.
`,
    section6: `После ввода промта становится доступна кнопка ***Сгенерировать***. Затем создается задача на генерацию и отображается в истории.
`,
    section7: `Задачу можно удалить, нажав на кнопку справа. Чтобы увидеть результат генерации, можно нажать кнопку ***Обновить***. Среднее время генерации изображения в текущей реализации сервиса: ***45*** секунд. Первый запуск генерации может занимать больше времени т.к. необходимо подгрузить зависимости, модель генерации и модель для удаления фона: ~10 мин.
По завершении генерации, в истории отобразится полученное изображение:
    `,
    section8: `После генерации и последующего редактирования, изображение можно добавить на баннер. Чтобы это сделать, в карточке изображения нужно нажать на кнопку “Добавить на баннер”.


### Параметры баннера`,
    section9: `Чтобы расположить сгенерированное изображение на баннере пользователю необходимо указать значения всех трех параметров. Размер баннера на выходе пропорционален размерам сгенерированного изображения.

#### Тип баннера
Типы баннеров были выбраны на основе баннеров из приложения МБ и портала ИБ. 
- Квадратный баннер
- Промо-баннер маленький
- Промо-баннер средний
- Баннер NBO
- Частично прозрачный баннер из МБ
- Прямоугольный баннер из МБ
`,
    section10: `#### Расположение изображения 
Для различных типов баннеров доступны разные опции расположения контента.

#### Цвет баннера 
Цвет фона.

### Регистрация и авторизация
Новый пользователь должен зарегистрироваться. Для этого нужно нажать кнопку ***Регистрация*** на экране авторизации. Затем необходимо ввести логин и пароль. Если пользователь с таким логином уже существует, то нажатие на кнопк ***Зарегистрироваться*** не даст эффекта - придумайте другой логин. После успешной регистрации откроется экран генерации изображений.
`,
    section11: `На экране авторизации необходимо указать логин и пароль, введенные при регистрации. Если введены неверные данные или пользователь еще не существует, то нажатие на кнопку ***Войти*** не даст никакого результата.
`,
    section12: `После успешной авторизации в кэш записывается токен сессии, который добавляется в заголовок ***Authorization*** запросов авторизованной зоны. Чтобы очистить токен сессии и выйти из учетной записи нажмите кнопку ***Выйти*** в правом верхнем углу. 
`,
}


const UserGuideScreen = () => {
    return (
            <ScrollView
                contentInsetAdjustmentBehavior="automatic"
                style={{ height: '100%' }}
            >
                <VStack p="$10" space="md">
                    <Markdown>{guideText.section1}</Markdown>
                    <GuideImage path={guideImages.image1} />
                    <Markdown>{guideText.section2}</Markdown>
                    <GuideImage path={guideImages.image2} />
                    <GuideImage path={guideImages.image3} />
                    <Markdown>{guideText.section3}</Markdown>
                    <GuideImage path={guideImages.image4} />
                    <Markdown>{guideText.section4}</Markdown>
                    <GuideImage path={guideImages.image5} />
                    <Markdown>{guideText.section5}</Markdown>
                    <GuideImage path={guideImages.image6} />
                    <Markdown>{guideText.section6}</Markdown>
                    <GuideImage path={guideImages.image7} />
                    <Markdown>{guideText.section7}</Markdown>
                    <GuideImage path={guideImages.image8} />
                    <Markdown>{guideText.section8}</Markdown>
                    <GuideImage path={guideImages.image9} />
                    <Markdown>{guideText.section9}</Markdown>
                    <Markdown>{guideText.section10}</Markdown>
                    <GuideImage path={guideImages.image10} />
                    <Markdown>{guideText.section11}</Markdown>
                    <GuideImage path={guideImages.image11} />
                    <Markdown>{guideText.section12}</Markdown>
                    <GuideImage path={guideImages.image12} />
                </VStack>
                <Markdown>{guideText}</Markdown>
            </ScrollView>
    )
}

const GuideImage = ({ path }) => {
    return (
        <Center><Image style={styles.guideImage} source={path} /></Center>
    )
}
export default UserGuideScreen;

const styles = StyleSheet.create({
    guideMarkdown: {
        // width: "20%",
        // height: "20%"
    },
    guideImage: {
        width: "50vw",
        height: "50vh",
        resizeMode: "contain",
    }
})